trigger:
  branches:
    include:
      - main
      - dev

resources:
  repositories:
    - repository: self
    - repository: templates
      type: github
      name: equinor/lighthouse-infra
      endpoint: 'equinor'
      ref: infra/move

# Global variables for the pipeline
variables:
  - template: /src/resources/web-client/web-client-variables.yml@templates
  - template: /src/variables/global-variables.yml@templates

  - name: 'repositoryName'
    value: lighthouse-client-function

stages:
  # build_stage stage. Docker build, tag and push
  - stage: build
    displayName: 'Docker - Build and Push'
    variables:
      envName: 'build'
      envRg: '${{ variables.envRgName }}'
      serviceConnection: '${{ variables.nonProdServiceConnection }}'
      envGroupName: '$(globalPrefix)-$(fullAppName)-function-${{ variables.envName }}'
      dockerfilePath: '/Dockerfile'

    jobs:
      # Docker Build
      - template: /src/resources/web-client/jobs/client-function-dockerbuild.yml@templates
        parameters:
          dependsOn: ''
          condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
          deploymentName: 'docker_build'
          envGroup: '${{ variables.envGroupName }}'
          buildCommand: build
          dockerfilePath: '${{ variables.dockerfilePath }}'
          repository: '${{ variables.repositoryName }}'
          dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnectionName }}'

      # Docker Build and Push
      - template: /src/resources/web-client/jobs/client-function-dockerbuild.yml@templates
        parameters:
          dependsOn: ''
          condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'))
          deploymentName: 'docker_build_push'
          envGroup: '${{ variables.envGroupName }}'
          buildCommand: buildAndPush
          dockerfilePath: '${{ variables.dockerfilePath }}'
          repository: '${{ variables.repositoryName }}'
          dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnectionName }}'

  # Deploy to dev environment
  - stage: dev
    displayName: 'Deploy to dev'
    dependsOn: 'build'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/dev'))
    variables:
      envName: 'dev'
      envLabel: 'non-prod'
      rgName: '${{ variables.envRgName }}'
      envGroupName: '$(globalPrefix)-$(fullAppName)-function-${{ variables.envName }}'
      serviceConnection: '${{ variables.nonProdServiceConnection }}'
      containerRegistry: '${{ variables.containerRegistryName }}'

    jobs:
      - template: /src/resources/web-client/jobs/client-function-deploy.yml@templates
        parameters:
          deploymentName: 'deploy_function'
          dependsOn: ''
          serviceConnection: '${{ variables.serviceConnection }}'
          rgName: '${{variables.rgName}}'
          envGroup: '${{ variables.envGroupName }}'
          repository: '${{ variables.repositoryName }}'
          containerRegistry: '${{ variables.containerRegistry }}'
          appName: '${{ variables.functionAppName }}'
          kvName: '${{ variables.kvName }}'

  # Deploy to test environment
  - stage: test
    displayName: 'Deploy to test'
    dependsOn: 'build'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      envName: 'test'
      envLabel: 'non-prod'
      rgName: '${{ variables.envRgName }}'
      envGroupName: '$(globalPrefix)-$(fullAppName)-function-${{ variables.envName }}'
      serviceConnection: '${{ variables.nonProdServiceConnection }}'
      containerRegistry: '${{ variables.containerRegistryName }}'

    jobs:
      - template: /src/resources/web-client/jobs/client-function-deploy.yml@templates
        parameters:
          deploymentName: 'deploy_function'
          dependsOn: ''
          serviceConnection: '${{ variables.serviceConnection }}'
          rgName: '${{variables.rgName}}'
          envGroup: '${{ variables.envGroupName }}'
          repository: '${{ variables.repositoryName }}'
          containerRegistry: '${{ variables.containerRegistry }}'
          appName: '${{ variables.functionAppName }}'
          kvName: '${{ variables.kvName }}'

  # Deploy to prod environment
  - stage: prod
    displayName: 'Deploy to prod'
    dependsOn: 'build'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      envName: 'prod'
      envLabel: 'prod'
      rgName: '${{ variables.envRgName }}'
      envGroupName: '$(globalPrefix)-$(fullAppName)-function-${{ variables.envName }}'
      serviceConnection: '${{ variables.prodServiceConnection }}'
      containerRegistry: '${{ variables.containerRegistryName }}'

    jobs:
      - template: /src/resources/web-client/jobs/client-function-deploy.yml@templates
        parameters:
          deploymentName: 'deploy_function'
          dependsOn: ''
          serviceConnection: '${{ variables.serviceConnection }}'
          rgName: '${{variables.rgName}}'
          envGroup: '${{ variables.envGroupName }}'
          repository: '${{ variables.repositoryName }}'
          containerRegistry: '${{ variables.containerRegistry }}'
          appName: '${{ variables.functionAppName }}'
          kvName: '${{ variables.kvName }}'